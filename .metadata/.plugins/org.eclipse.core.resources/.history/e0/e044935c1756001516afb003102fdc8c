package dungeon;

import java.applet.Applet;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.Scanner;

public class MainClass extends Applet implements KeyListener{

	private static final long serialVersionUID = 1L;
	private static int sleeptime = 17; 
	private static int WIDTH = 800;
	private static int HEIGHT = 480;
	private static Background bg1, bg2;
	private static MainCharac player;
	private EnemyTest enemy;
	private Image img, background;
	private Graphics second;
	private URL base;
	
	private ArrayList<Tile> tilearray = new ArrayList<Tile>();
	
	@Override
	public void init() {
		setSize(WIDTH, HEIGHT);
		setBackground(Color.BLACK);
		setFocusable(true);
		addKeyListener(this);
		Frame frame = (Frame) this.getParent().getParent();
		frame.setTitle("Dungeon Crawler");
		try {
			base = getDocumentBase();
		} catch (Exception e) {
			e.printStackTrace();
		}
		background = getImage(base, "data/dungeonbg.jpg");
	}
	
	@Override
	public void start() {
		bg1 = new Background(0, 0);
		bg2 = new Background(2160, 0);
		player = new MainCharac();
		enemy = new EnemyTest(340, 360);
		Thread thread = new Thread(new Runnable(){
			public void run() {
				while(true) {
					player.update();
					updateTiles();
					enemy.update();
					bg1.update();
					bg2.update();
					repaint();
					try {
						Thread.sleep(sleeptime);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		});
		thread.start();
		loadMap("data/mapQuick.txt");
	}

	
	@Override
	public void update(Graphics g) {
		if (img == null) {
			img = createImage(this.getWidth(), this.getHeight());
			second = img.getGraphics();
		}
		second.setColor(getBackground());
		second.fillRect(0, 0, getWidth(), getHeight());
		second.setColor(getForeground());
		paint(second);
		g.drawImage(img,0,0,this);
		enemy.animation.update();
	}
	
	@Override
	public void paint(Graphics g) {
		g.drawImage(background, bg1.getBgx(), bg1.getBgy(), this);
		g.drawImage(background, bg2.getBgx(), bg2.getBgy(), this);
		paintTiles(g);
		g.drawImage(player.animation.getSprite(), player.getCenterX(), player.getCenterY(), this);
		g.drawImage(enemy.animation.getSprite(), enemy.getCenterX(), enemy.getCenterY(), this);
	}
	
	//private static ArrayList pressedKeys;
	private static final int MAX_INTERVAL = 200;
	private static final int MAX_PRESS = 100;
	private long pressed = 0;
	private long interval = 0;
	
	@Override
	public void keyPressed(KeyEvent e) {
		switch (e.getKeyCode()) {
		case KeyEvent.VK_UP:
			player.jump();
			System.out.println("jump");
			break;
		case KeyEvent.VK_DOWN:
			if (player.isJump() == false) {
				player.setDucked(true);
				player.setSpdX(0);
			}
			break;
		case KeyEvent.VK_LEFT:
			pressed = System.currentTimeMillis();
			if (System.currentTimeMillis() - interval > MAX_INTERVAL) {
				System.out.println("running left");
			}
			break;
		case KeyEvent.VK_RIGHT:
			player.moveRight();
			break;
		case KeyEvent.VK_SPACE:
			if (!player.isDucked()) {
			}
			break;
		}
	}
	
	@Override
	public void keyReleased(KeyEvent e) {
		switch (e.getKeyCode()) {
		case KeyEvent.VK_UP:
			System.out.println("Stop jump");
			break;
		case KeyEvent.VK_DOWN:
			player.setDucked(false);
			break;
		case KeyEvent.VK_LEFT:
			if(System.currentTimeMillis() - pressed > 30 && System.currentTimeMillis() - pressed < MAX_PRESS) {
				if (player.isTapLeft() && System.currentTimeMillis() - interval < MAX_INTERVAL) {
					System.out.println("taptap");
					player.tapLeft();
				}
				System.out.println("tap");
				player.setTapLeft(true);
				interval = System.currentTimeMillis();
			} else {
				player.setTapLeft(false);
				player.setMovingLeft(false);
			}
			player.stop();
			break;
		case KeyEvent.VK_RIGHT:
			player.setMovingRight(false);
			player.stop();
			break;
		case KeyEvent.VK_SPACE:
			break;
		}
	}
	
	@Override
	public void keyTyped(KeyEvent e) {	}
	
	@Override
	public void stop() { /* TODO */	}
	
	@Override
	public void destroy() {	/* TODO */	}
	
	/* Tiling functions */
	private void loadMap(String filename) {
	        int height = 0;
	        File file = new File(filename);
	        
	        try {
		        Scanner sc = new Scanner(file);
		        while (sc.hasNextLine()) {
		        	String line = sc.nextLine();
		        	System.out.println(line);
		        	if (!line.startsWith("!")) {
		        		for (int i = 0; i < line.length(); i++) {
		        			if (line.charAt(i) != 'O' || line.charAt(i) != ' ') {
		        				tilearray.add(new Tile(i, height, line.charAt(i)));
		        			}
		        		}
		        		height++;
		        	}
		        }
		        sc.close();
	        } catch (Exception e) {
	        	e.printStackTrace();
	        }
        }
	
	private void updateTiles() {
		for (int i = 0; i < tilearray.size(); i++) {
			Tile t = (Tile) tilearray.get(i);
			t.update();
		}
	}
	
	private void paintTiles(Graphics g) {
		for (int i = 0; i < tilearray.size(); i++) {
			Tile t = (Tile) tilearray.get(i);
			g.drawImage(t.getTileImage(), t.getTileX(), t.getTileY(), this);
		}
	}
	
	/* Getters and Setters */
	public static Background getBg1() {
		return bg1;
	}
	
	public static Background getBg2() {
		return bg2;
	}
	
	public static int getScreenWidth() {
		return WIDTH;
	}
	
	public static int getScreenHeight() {
		return HEIGHT;
	}
	
	public static MainCharac getPlayer() {
		return player;
	}
}
